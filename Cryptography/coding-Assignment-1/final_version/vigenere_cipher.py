# -*- coding: utf-8 -*-
"""Vigenere-cipher.ipynb
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDdrb5T-PORnYVZYe1K9XtHx8izMS4UM

    For TX: You can go to the link above and run the code. I remove the restirction
    for anybody with the link. 

    I am using the same ctext in the homework. 
"""

import binascii
MAX_Key_Length = 13
MIN_Key_Length = 1
import collections
import numpy as np
import string
from collections import Counter

def Key_Length(btext):

  Best_score = 0
  Best_key_length = 1

  for k in range(MIN_Key_Length, MAX_Key_Length+1):
    scores=[]
    for i in range(k):
      # extract evey nth bytes
      nth_char = btext[i::k]
      # computer the frequency
      Length_of_each_group = len(nth_char)
      freq = collections.Counter(nth_char)
      freq = {byte: count / Length_of_each_group for byte, count in freq.items()}
      score = sum(f ** 2 for f in freq.values())
      scores.append(score)
    avg_score = np.mean(scores)
    #print(k, avg_score)
    if avg_score > Best_score:
      Best_score = avg_score
      Best_key_length = k
  return Best_key_length

charset = "abcdefghijklmnopqrstuvwxyz "
charset_up = charset.upper()
punct = ",.;?!:"

def Key_Bytes(bin_vals, key_length):
  key = []
  best_score = 0
  best_key_byte = 0
  decrypted_text = []
  for i in range(key_length):
    best_score = 0
    best_byte = 0
    nth_char = bin_vals[i::key_length]
    print(i, nth_char)

    for key_byte in range(256):
      decrypted_text = [char ^ key_byte for char in nth_char]
      if all(32 <= c <= 127 for c in decrypted_text):
        valid_chars = charset + charset_up + punct
        score = sum(decrypted_text.count(ord(c)) for c in valid_chars)

        #score = get_score(decrypted_text)
        if score > best_score:
            best_score = score
            best_key_byte = key_byte
    key.append(best_key_byte)
  print(f"Recovered Key: {bytes(key).hex()}")
  return bytes(key)

def Dec_Vignere_Xor(ciphertext, Key):
  clength = len(ciphertext)
  klength = len(Key)
  repeated_key = (Key * (clength // klength + 1))[:len(ciphertext)]
  print("repeated_key: ", repeated_key)
  # XOR decryption
  decrypted_bytes = bytes([c ^ k for c, k in zip(ciphertext, repeated_key)])
  return decrypted_bytes.decode(errors="ignore")

## read the cipher
filename = "ctext.txt"
with open(filename) as f:
  hex_val = f.read().strip()
print(hex_val)
bin_val = binascii.unhexlify(hex_val)
#print(bin_val)
key_length = Key_Length(bin_val)
print("key_length: ", key_length)
# ith byte of the key
key_bytes = Key_Bytes(bin_val, key_length)
#print("byte of the key: ", key_bytes)
decrypted_text = Dec_Vignere_Xor(bin_val,key_bytes)
print("Decrypted Text:", decrypted_text)